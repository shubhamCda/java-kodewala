package com.threading.java;

class Task {
	public synchronized void oddPrintMethod() { // synchronized based on the concept of object locking
		for (int i = 1; i <= 10; i++) {
			if (i % 2 != 0) {
				System.out.println("Odd: " + i);
			}
		}
	}

	public synchronized void evenPrinterMethod() {
		for (int i = 1; i <= 10; i++) {
			if (i % 2 == 0) {
				System.out.println("Even: " + i);
			}
		}
	}
}

class EvenThread extends Thread {
	Task task;

	public EvenThread(Task task) {
		super();
		this.task = task;
	}

	public void run() {
		task.evenPrinterMethod(); // started exec. and object is locked
	}
}

class OddThread extends Thread {
	Task task;

	public OddThread(Task task) {
		super();
		this.task = task;
	}

	public void run() {
		task.oddPrintMethod(); // Obj. lock. is used by evenPrinterMethod().
		// previous method got object lock then this method has to wait for the obj.
		// lock to release.
		// once evenPrinterMethod() completed it will assigned lock to oddPrintMethod();
		// method.
		// execution will start for this method.
		// every obj get only one Object Lock.
	}
}

public class OddEvenThread {

	public static void main(String[] args) {

		Task task = new Task(); // only one object lock
		// when we will use synchronized we have to use common object otherwise
		// thread will break
		EvenThread et = new EvenThread(task);
		et.start();
		OddThread ot = new OddThread(task);

		ot.start();

	}

}
